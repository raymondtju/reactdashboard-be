let app = require("../app");
let debug = require("debug")("reactdashboard-be:server");
let mongoose = require("mongoose");
let http = require("http");

let dotenv = require("dotenv");
dotenv.config();

let port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

let server = http.createServer(app);

const Product = require("../app/api/v1/Product/model");
const ProductStat = require("../app/api/v1/ProductStat/model");
const { dataProduct, dataProductStat } = require("../app/data");

mongoose.set("strictQuery", true);
mongoose
  .connect(process.env.MONGODB_DEV, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("Connected to MongoDB");
    // User.insertMany(dataUser);
    // Product.insertMany(dataProduct);
    // ProductStat.insertMany(dataProductStat);
    server.listen(port);
    server.on("error", onError);
    server.on(
      "listening",
      onListening,
      console.log("Server is running on port " + port)
    );
  })
  .catch((err) => {
    console.log("Error connecting to MongoDB", err);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
